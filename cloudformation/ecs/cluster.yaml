AWSTemplateFormatVersion: 2010-09-09
Description: Guidance - External Connectivity to Amazon VPC Lattice (Proxy)

# ==============================================================================
# NGINX PROXY FOR AMAZON VPC LATTICE EXTERNAL CONNECTIVITY
# ==============================================================================
#
# PURPOSE:
# This CloudFormation template deploys an NGINX proxy infrastructure to enable
# external connectivity to Amazon VPC Lattice services. It creates a dual
# load balancer architecture with both internet-facing and internal Network
# Load Balancers.
#
# ARCHITECTURE:
# External Traffic:  Internet → External NLB → NGINX Containers → VPC Lattice Services
# Internal Traffic:  VPC → Internal NLB → NGINX Containers → VPC Lattice Services
#
# KEY COMPONENTS:
# - External Network Load Balancer (internet-facing) in public subnets
# - Internal Network Load Balancer (private) in private subnets  
# - ECS Fargate cluster running NGINX containers in private subnets
# - Target Groups for HTTP (port 80) and HTTPS (port 443) traffic
# - Security Group with least-privilege access rules
# - IAM roles for ECS task execution and container operations
# - Auto Scaling configuration for high availability
# - CloudWatch log group for container logging
#
# TRAFFIC FLOWS:
# External Traffic Flow:
# 1. Internet traffic hits the external NLB (internet-facing)
# 2. External NLB forwards traffic to NGINX containers in private subnets
# 3. NGINX containers proxy requests directly to VPC Lattice services
#
# Internal Traffic Flow:
# 1. Internal VPC traffic hits the internal NLB
# 2. Internal NLB forwards traffic to NGINX containers in private subnets
# 3. NGINX containers proxy requests directly to VPC Lattice services
#
# NOTE: NGINX containers serve as targets for BOTH load balancers,
# providing a single proxy layer that can handle both external and internal traffic
#
# PREREQUISITES:
# - Existing VPC with public and private subnets
# - NGINX container image available in ECR or Docker Hub
# - Proper VPC Lattice service configuration
#
# NAMING CONVENTION:
# - Parameters: p<Name> (Hungarian notation)
# - Resources: r<Name> (Hungarian notation)  
# - Outputs: o<Name> (Hungarian notation)
#
# ==============================================================================

Parameters:
  pVpcId:
    Description: The VPC id where NGINX proxy will be deployed
    Type: String
    Default: ''
  pVpcCidr:
    Description: The VPC CIDR block for security group rules
    Type: String
    Default: ''
  pPrivateSubnet1:
    Description: The first private subnet id for NGINX containers
    Type: String
    Default: ''
  pPrivateSubnet2:
    Description: The second private subnet id for NGINX containers
    Type: String
    Default: ''
  pPrivateSubnet3:
    Description: The third private subnet id for NGINX containers
    Type: String
    Default: ''
  pPublicSubnet1:
    Description: The first public subnet id for external load balancer
    Type: String
    Default: ''
  pPublicSubnet2:
    Description: The second public subnet id for external load balancer
    Type: String
    Default: ''
  pPublicSubnet3:
    Description: The third public subnet id for external load balancer
    Type: String
    Default: ''
  pNginxImage:
    Description: NGINX container image URI (e.g., nginx:latest or ECR repository URI)
    Type: String
    Default: ''

Resources:
  rNginxLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/${rNginxCluster}'

  rNginxExtNLBTGroup443:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Port: 443
      Protocol: TCP
      TargetGroupAttributes:
        - Key: proxy_protocol_v2.enabled
          Value: true
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref pVpcId

  rNginxExtNLBTGroup80:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Port: 80
      Protocol: TCP
      TargetGroupAttributes:
        - Key: proxy_protocol_v2.enabled
          Value: true
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref pVpcId

  rNginxExtNLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: dualstack
      Scheme: internet-facing
      Subnets:
        - !Ref pPublicSubnet1
        - !Ref pPublicSubnet2
        - !Ref pPublicSubnet3
      Type: network

  rNginxExtNLBListener443:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref rNginxExtNLBTGroup443
          Type: forward
      LoadBalancerArn: !Ref rNginxExtNLB
      Port: 443
      Protocol: TCP

  rNginxExtNLBListener80:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref rNginxExtNLBTGroup80
          Type: forward
      LoadBalancerArn: !Ref rNginxExtNLB
      Port: 80
      Protocol: TCP

  rNginxIntNLBTGroup443:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Port: 443
      Protocol: TCP
      TargetGroupAttributes:
        - Key: proxy_protocol_v2.enabled
          Value: true
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref pVpcId

  rNginxIntNLBTGroup80:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Port: 80
      Protocol: TCP
      TargetGroupAttributes:
        - Key: proxy_protocol_v2.enabled
          Value: true
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref pVpcId

  rNginxIntNLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: dualstack
      Scheme: internal
      Subnets:
        - !Ref pPrivateSubnet1
        - !Ref pPrivateSubnet2
        - !Ref pPrivateSubnet3
      Type: network

  rNginxIntNLBListener443:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref rNginxIntNLBTGroup443
          Type: forward
      LoadBalancerArn: !Ref rNginxIntNLB
      Port: 443
      Protocol: TCP

  rNginxIntNLBListener80:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref rNginxIntNLBTGroup80
          Type: forward
      LoadBalancerArn: !Ref rNginxIntNLB
      Port: 80
      Protocol: TCP

  rNginxCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  rNginxTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ExecutionRoleArn: !Ref rNginxTaskExecRole
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Image: !Ref pNginxImage
          Name: Nginx
          PortMappings:
            - ContainerPort: 443
              Protocol: tcp
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref rNginxLogGroup
              awslogs-stream-prefix: lattice-ingress
          Ulimits:
            - HardLimit: 1048576
              Name: nofile
              SoftLimit: 1048576
      Cpu: 2048
      Memory: 4096
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !Ref rNginxTaskRole

  rNginxService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - rNginxExtNLBListener443
      - rNginxIntNLBListener443
      - rNginxExtNLBListener80
      - rNginxIntNLBListener80
    Properties:
      Cluster: !Ref rNginxCluster
      EnableExecuteCommand: true
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: Nginx
          ContainerPort: 443
          TargetGroupArn: !Ref rNginxExtNLBTGroup443
        - ContainerName: Nginx
          ContainerPort: 443
          TargetGroupArn: !Ref rNginxIntNLBTGroup443
        - ContainerName: Nginx
          ContainerPort: 80
          TargetGroupArn: !Ref rNginxExtNLBTGroup80
        - ContainerName: Nginx
          ContainerPort: 80
          TargetGroupArn: !Ref rNginxIntNLBTGroup80
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref rNginxSecurityGroup
          Subnets:
            - !Ref pPrivateSubnet1
            - !Ref pPrivateSubnet2
            - !Ref pPrivateSubnet3
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref rNginxTask

  rNginxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref pVpcId
      GroupDescription: Nginx Security group
      SecurityGroupIngress:
        - CidrIp: !Ref pVpcCidr
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow ingress - HTTPS traffic from VPC to NGINX proxy
        - CidrIp: !Ref pVpcCidr
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          Description: Allow ingress - HTTP traffic from VPC to NGINX proxy
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: Nginx SG

  rNginxTaskExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ecs-actions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'

  rNginxTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ecs-actions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'

  rNginxScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: 9
      MinCapacity: 3
      ResourceId: !Join ['',['service/',!Ref rNginxCluster,'/',!GetAtt rNginxService.Name]]
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      
  rNginxScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: !Join ['',['scaling-policy-',!GetAtt rNginxService.Name]]
      PolicyType: 'TargetTrackingScaling'
      ResourceId: !Join ['',['service/',!Ref rNginxCluster,'/',!GetAtt rNginxService.Name]]
      ScalableDimension: 'ecs:service:DesiredCount'
      ScalingTargetId: !Ref rNginxScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

Outputs:
  oVpcId:
    Description: VPC ID where NGINX proxy infrastructure is deployed
    Value: !Ref pVpcId
    Export:
      Name: !Sub ${AWS::StackName}-VpcId
      
  oNginxExtNLB:
    Description: DNS name of the external (internet-facing) Network Load Balancer
    Value: !GetAtt rNginxExtNLB.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-NginxExtNLB
      
  oNginxIntNLB:
    Description: DNS name of the internal Network Load Balancer for VPC Lattice connectivity
    Value: !GetAtt rNginxIntNLB.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-NginxIntNLB

  oSecurityGroupId:
    Description: Security Group ID for NGINX containers
    Value: !Ref rNginxSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroupId

  oClusterName:
    Description: ECS Cluster name for NGINX proxy
    Value: !Ref rNginxCluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName

  oServiceName:
    Description: ECS Service name for NGINX proxy
    Value: !Ref rNginxService
    Export:
      Name: !Sub ${AWS::StackName}-ServiceName

  oTaskDefinitionArn:
    Description: Task Definition ARN for NGINX containers
    Value: !Ref rNginxTask
    Export:
      Name: !Sub ${AWS::StackName}-TaskDefinitionArn

  oLogGroupName:
    Description: CloudWatch Log Group name for NGINX containers
    Value: !Ref rNginxLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-LogGroupName

  oExtNLBTargetGroup443:
    Description: External NLB Target Group ARN for port 443
    Value: !Ref rNginxExtNLBTGroup443
    Export:
      Name: !Sub ${AWS::StackName}-ExtNLBTargetGroup443

  oExtNLBTargetGroup80:
    Description: External NLB Target Group ARN for port 80
    Value: !Ref rNginxExtNLBTGroup80
    Export:
      Name: !Sub ${AWS::StackName}-ExtNLBTargetGroup80

  oIntNLBTargetGroup443:
    Description: Internal NLB Target Group ARN for port 443
    Value: !Ref rNginxIntNLBTGroup443
    Export:
      Name: !Sub ${AWS::StackName}-IntNLBTargetGroup443

  oIntNLBTargetGroup80:
    Description: Internal NLB Target Group ARN for port 80
    Value: !Ref rNginxIntNLBTGroup80
    Export:
      Name: !Sub ${AWS::StackName}-IntNLBTargetGroup80

  oTaskExecRoleArn:
    Description: Task Execution Role ARN for NGINX containers
    Value: !GetAtt rNginxTaskExecRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TaskExecRoleArn

  oTaskRoleArn:
    Description: Task Role ARN for NGINX containers
    Value: !GetAtt rNginxTaskRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TaskRoleArn

  oScalableTargetId:
    Description: Auto Scaling target ID for NGINX service
    Value: !Ref rNginxScalableTarget
    Export:
      Name: !Sub ${AWS::StackName}-ScalableTargetId
